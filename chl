#! /usr/bin/perl -w
use strict;

#===============================================================================
#   <chl>                                                                      |
#===============================================================================
#   Description          : tool for retrieve and set change performed to a/many
#       server(s)/device(s)
#       
#   Parametres           : see sub usage
#                          
#                          


#===============================================================================
# Who         |   Date    | Description                                        |
#===============================================================================
# S Huber     |30 Dec 2013| Started                                            |
#             |           |                                                    |
#===============================================================================
#             |           |                                                    |
#             |           |                                                    |
#===============================================================================
#             |           |                                                    |
#             |           |                                                    |
#===============================================================================

use DBI;
use Sys::Hostname;
use Getopt::Long qw(:config auto_help);
use Term::ANSIColor qw(:constants);

# Connect to the database
my $dbh = DBI->connect('DBI:mysql:database=sysadm;host=chl.fr117.corpintra.net',
                       'sysadm', 'XXXXXXXXX',
                       {'RaiseError' => 1});

$dbh->do(qq{SET NAMES 'utf8';});

my $query;
my $request_state=0;

sub fill_request() {
  my (@args)=@_;
  my $text=shift(@args);

  if (!defined($text) or $text eq '') {
    print "malformed request. Base was: $query\n";
    # Disconnect from the database.
    $dbh->disconnect();
    exit 1;
  }

  if ($request_state>1) {
    $query="$query AND ";
    $request_state++;
  }
  if ($request_state==1) {
    $query="$query WHERE ";
    $request_state=2;
  }
  
  $query="$query $text";
}

sub affiche() {
  my (@args)=@_;
  my $limit;
  my $last=$args[0];

  shift @args;
  my $liste;
  $liste="(\'$args[0]\'" if (defined($args[0]));
  shift @args;
  foreach my $dev (@args) {
    $liste="$liste,\'$dev\'";
  }
  $liste="$liste)";
  my $sth;
  $query="SELECT * FROM ChangeLogger";
  $request_state=1;
  if (!defined($last) or $last eq '') {
    if ($liste ne ')') {
      &fill_request("server in $liste");
    } else {
    }
  } else {
    my $ecart;
    if ($last=~m/d$/) {
      $ecart=$last;
      $ecart=~s/^(.+)d$/$1/;
      if ($liste ne ')') {
        &fill_request("server in $liste and timestampdiff(day,quand,now())<=$ecart");
      } else {
        &fill_request("timestampdiff(day,quand,now())<=$ecart");
      }
    }
    if ($last=~m/w$/) {
      $ecart=$last;
      $ecart=~s/^(.+)w$/$1/;
      if ($liste ne ')') {
        &fill_request("server in $liste and timestampdiff(week,quand,now())<=$ecart");
      } else {
        &fill_request("timestampdiff(week,quand,now())<=$ecart");
      }
    }
    if ($last=~m/m$/) {
      $ecart=$last;
      $ecart=~s/^(.+)m$/$1/;
      if ($liste ne ')') {
        &fill_request("server in $liste and timestampdiff(month,quand,now())<=$ecart");
      } else {
        &fill_request("timestampdiff(month,quand,now())<=$ecart");
      }
    }
  }  
  $query="$query ORDER BY quand";
  $sth = $dbh->prepare("$query");
  $sth->execute();
  my $i=0;
  while (my $ref = $sth->fetchrow_hashref()) {
    printf "%14s;%s;%7s;%s\n",$ref->{'server'},$ref->{'quand'},$ref->{'qui'},$ref->{'quoi'};
    $i++;
  }
  $sth->finish();
}

sub usage() {
  print "Usage: $0 [-s \"your change here\" -t timestamp] [-F field=value] [-I /regexp/] [-last xxx] [-d]\n";
  print "\
       by default (with no option) chl display changes for all devices
       -s TEXT  : (set) the text to be recorded for current server (if no device specified) or for specified device(s) list
       -F restriction on relevant DB field
       -I server identity restriction
       -last #[dwm] : only for get options, limit the output to the last # entries or #d (day(s)) or #w (week(s)) or #m (month(s))
       -t TIME  : specifies timestamp, only usefull when recording something (format YYYYMMDDHHmm)
       -d : dry-run (test)
       -v : verbose
       -h : display usage

examples:
$0 -s \'upgraded to sles11sp3\' -I s117mhttp001
  => record this change with the current timestamp in the MySQL DB
$0 -s \'upgraded to sles11sp3\' -I s117mhttp001 -t 201403061005
  => record this change with 2014/03/06 10:05 timestamp
$0 -last 5d -I s117f103
  => display the last 5 days changes performed on s117f103\n";
  # Disconnect from the database.
  $dbh->disconnect();
  exit 0;
}

# Options processing:
my $setdata;
my @identities;
my @filters;
my $last;
my $timestamp;
my $verbose;
my $dryrun;
GetOptions ('set:s' => \$setdata, 'Filter:s' => \@filters, 'Identity:s' => \@identities, 'last:s' => \$last, 'timestamp:s' => \$timestamp, 'help' => sub { usage() }, 'verbose' => \$verbose, 'dryrun' => \$dryrun);

# 'set' to something :
if (defined($setdata) and "$setdata" eq "") {
  print STDERR RED, "Incorrect option: -s requires an argument\n", RESET;
  &usage();
  # Disconnect from the database.
  $dbh->disconnect();
  exit 2;
}

# timestamp validity:
if (defined($timestamp)) {
  $timestamp="${timestamp}00";
  if ($timestamp!~m/^20\d{12}$/) {
    print STDERR RED, "bad timestamp.\nAwaited YYYYMMDDHHmm\tExample: 201406031030 for 2014/06/03 10:30\n", RESET;
    # Disconnect from the database.
    $dbh->disconnect();
    exit 3;
  }
  if (!defined($setdata)) {
    print STDERR RED, "-s \"XXXX\" option is expected when specifying a timestamp\n\n", RESET;
    &usage();
    # Disconnect from the database.
    $dbh->disconnect();
    exit 4;
  }
}

$query="SELECT name FROM servers WHERE os LIKE 'sles%'";
# expand the request with the given Filters
foreach my $filter (@filters) {
  $filter=~s/=/='/;
  $filter=~s/$/'/ if ($filter=~m/=/);
  $query="$query AND $filter";
}

if (defined($verbose)) {
  print STDOUT BLUE, "db query         : ", RESET;
  print "$query\n";
}

my $sth=$dbh->prepare("$query");
$sth->execute();
my @devices;
while (my $ref = $sth->fetchrow_hashref()) {
  @devices=(@devices,"$ref->{'name'}");
}
$sth->finish();
if (defined($verbose) and @filters!=0) {
  print STDOUT BLUE, "facts filtered   : ", RESET;
  print "@devices\n";
}

# filtering server list with Identities:
my @resultat;
foreach my $singleidentity (@identities) {
  if ($singleidentity=~m/^\//) {
    $singleidentity=~s/\///g;
  }
  @resultat=(@resultat,grep { /$singleidentity/ } @devices);
}
@devices=@resultat;

if (defined($verbose) and @identities!=0) {
  print STDOUT BLUE, "identity filtered: ", RESET;
  print "@devices\n";
}

# all pre-checks ok, let's perform the required action :
if (defined($setdata)) {
  # SET :
  
  # if no filter specified /!\
  if (@identities==0 and @filters==0) {
    print STDOUT RED, "No device defined !\n", RESET;
    undef @devices;
    # Disconnect from the database.
    $dbh->disconnect();
    exit 5;
  }

  # retrieve original User :
  open FD, "/usr/bin/who am i |";
  my $whoami;
  my $sth=$dbh->prepare("SELECT emea_user, a_user FROM emea ORDER BY emea_user");
  $sth->execute();
  my %emeaid;
  while (my $ref = $sth->fetchrow_hashref()) {
    $emeaid{$ref->{'emea_user'}}=$ref->{'a_user'};
  }
  $sth->finish();

  my $from;
  while (<FD>) {
    chomp;
    $whoami=$_;
    $from=$_;
    $whoami=~s/^(\w+)\s+.+/$1/;
    $from=~s/.+\s+\((.+)\)$/$1/;
  }
  close FD;
  $whoami=$emeaid{"$whoami"} if (defined($emeaid{"$whoami"}));
  if (defined($verbose)) {
    print STDOUT BLUE, "who am i        : ", RESET;
    print "$whoami\n";
  }

  # record in MySQL :
  $timestamp="now()" if (!defined($timestamp));
  if (defined($verbose)) {
    print STDOUT BLUE, "timestamp       : ", RESET;
    print "$timestamp\n";
  }

  if (!defined($dryrun)) {
    $sth=$dbh->prepare("INSERT INTO ChangeLogger(server, quand, qui, quoi, de) VALUES (?,$timestamp,\'$whoami\',\'$setdata\',\'$from\')");
    foreach my $dev (@devices) {
      print "INSERT INTO ChangeLogger(server, quand, qui, quoi, de) VALUES (\'$dev\',$timestamp,\'$whoami\',\'$setdata\',\'$from\')" if (defined($verbose));
      $sth->execute("$dev") or die "Couldn't execute statement: " . $sth->errstr;
    }
  } else {
    print STDOUT BLUE, "Dry-run ! Nothing has been performed\n", RESET;
    if (defined($verbose)) {
      foreach my $dev (@devices) {
        print "INSERT INTO ChangeLogger(server, quand, qui, quoi, de) VALUES (\'$dev\',$timestamp,\'$whoami\',\'$setdata\',\'$from\')\n";
      }
    }
  }
} else {
  # GET :
  if (defined($devices[0]) and $devices[0] eq '') {
    print STDOUT BLUE,"Setting device to: ".hostname."\n",RESET;
    $devices[0]=hostname;
  }

  &affiche($last,@devices) if (!defined($dryrun));
}

# Disconnect from the database.
$dbh->disconnect();
